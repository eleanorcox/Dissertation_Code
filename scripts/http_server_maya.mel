///////////////////////////////////////////////////////////////////
// Testing http networking.
// Run from inside Maya. Acts as a SERVER.
//
// ISSUES: Each request is piped to the commandport in multiple
// parts (i.e. each newline in the request pipes a separate request)
// So, for example, information is not held for the POST request,
// but returned immediately. Current workaround is using the "CMD"
// argument, but this makes the http semi-redundant, so trying to
// find a better way around this.
// Trying to make this work in Python instead so see
// http_server_maya.py for further work.
///////////////////////////////////////////////////////////////////

commandPort -pre "myServer" -n  ":12345";

proc string returnPage(string $message){
    $head=("HTTP/1.0 200 OK\n"+
        "Content-length: "+size($message)+"\n"+
        "Content-type: text/plain\n"+
        "\n");
    return $head+$message;
}

proc string myServer(string $str){
    string $buffer[];
    $numTokens = `tokenize $str " " $buffer`;

    if ($buffer[0]=="GET"){
        if ($buffer[1]=="/"){
            return returnPage("Hello there!");
        }
    }
    else if ($buffer[0]=="POST"){
        if ($buffer[1]=="/"){
            return returnPage("GENERAL KENOBI!");
        }
    }
    else if ($buffer[0]=="CMD"){
        string $CMD_buffer[];
        $CMDTokens = `tokenize $str "#" $CMD_buffer`;
        eval($CMD_buffer[1]);
    }

    return "";
}

//commandPort -n  ":12345" -cl True;
